import java.io.IOException;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.rmi.Naming;
import java.rmi.RemoteException;
import java.util.HashMap;
import java.util.Iterator;

import javax.swing.JOptionPane;
 
public class HelloServer 
{
	private static HashMap<String, Socket> connectedUser = new HashMap<String, Socket>();
	private static Socket clientSocket = null;
	private static ServerSocket serverSocket;
	private static String username;
	private static PrintWriter output;
	
	private static final String message = "message";
	private static final String online = "online";
	private static final String offline = "offline";
	
	public HelloServer()
	{
		try
		{
			HelloInterfaceImplementation csi = new HelloInterfaceImplementation(this);
			Naming.rebind("rmi://localhost:1099/ChatService", csi);
		}
		catch(java.rmi.ConnectException ce)
		{
			JOptionPane.showMessageDialog(null, "Trouble : Please run rmiregistry.", "Connect Exception", JOptionPane.ERROR_MESSAGE);
			System.exit(-1);
		}
		catch(IOException ioe)
		{
			JOptionPane.showMessageDialog(null, "Trouble : Please run rmiregistry.", "Exception", JOptionPane.ERROR_MESSAGE);
			System.exit(-1);
		}
		catch(Exception e)
		{
			JOptionPane.showMessageDialog(null, "Trouble : Please run rmiregistry.", "Exception", JOptionPane.ERROR_MESSAGE);
			System.exit(-1);
		}
	}
	
  public static void main(String args[])
  {
    try
    {
    	int port = Integer.parseInt(args[0]);
    	HelloServer hs = new HelloServer();
    	hs.processConnection(port);
    }
    catch (ArrayIndexOutOfBoundsException ae)
    {
    	JOptionPane.showMessageDialog(null, "Please insert the port", "ATTENTION", JOptionPane.INFORMATION_MESSAGE);
    	System.exit(-1);
    }
  }

  private void processConnection(int port)
  {
	  try
	  {
		  serverSocket = new ServerSocket(port);
		  System.out.println("Server is running on port " + port + "....");
	  }
	  catch (IOException ioe)
	  {
		  JOptionPane.showMessageDialog(null, "Could not listen port." + port, "ERROR", JOptionPane.ERROR_MESSAGE);
		  System.exit(-1);
	  }
	  
	  try
	  {
		  while (true)
		  {
			  addClient(serverSocket.accept());
			  String username = getUsername();
			  sendMessage(message, "SERVER", "[" + username + "] is now online");
		  }
	  }
	  catch (IOException ioe)
	  {
		  JOptionPane.showMessageDialog(null, "Could not accept connection.", "ERROR", JOptionPane.ERROR_MESSAGE);
		  System.exit(-1);
	  }
  }
  
  public void connect(String username)
  {
	  this.username = username;
  }
  
  public String getUsername()
  {
	  return username;
  }
  
  public void addClient(Socket clientSocket) throws RemoteException
  {
	  connectedUser.put(getUsername(), clientSocket);
	  sendMessage(online, getUsername(), "CLIENT");
  }
  
  public void sendMessage(String word, String username, String message) throws RemoteException
  {
	  Iterator i = connectedUser.keySet().iterator();
	  String user = null;
	  while(i.hasNext())
	  {
		  try
		  {
			  user = i.next().toString();
			  clientSocket = connectedUser.get(user);
			  output = new PrintWriter(clientSocket.getOutputStream(), true);
			  output.println(word + "***" + username + "***" + message);
			  output.flush();
		  }
		  catch(IOException ioe)
		  {
			  connectedUser.remove(user);
			  sendMessage(offline, user, user + "has left");
		  }
	  }
  }
}